{"version":3,"file":"component---src-pages-web-games-tetris-index-js-8a39e7b8ffc62a3d9ae0.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/ProjectDetail.js","webpack://gatsby-starter-default/./src/components/Seo.js","webpack://gatsby-starter-default/./src/components/icons.jsx","webpack://gatsby-starter-default/./src/components/layout/Header.js","webpack://gatsby-starter-default/./src/components/layout/Footer.js","webpack://gatsby-starter-default/./src/components/layout/Layout.js","webpack://gatsby-starter-default/./src/pages/web-games/tetris/index.js"],"sourcesContent":["import { ArrowLeftIcon, MotionGraphicsIcon } from \"./icons\"\nimport React from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout/Layout\"\n\nconst ProjectDetail = ({ title, isFullscreen = true, children }) => {\n\n  return (\n    <>\n      {isFullscreen ? (\n        <div className=\"flex flex-col h-screen\">\n          <header className=\"bg-slate-700 text-white text-2xl font-semibold p-4 text-center\">\n            {title}\n          </header>\n          <main className=\"flex-grow bg-slate-100 p-4 overflow-auto\">\n            {children}\n          </main>\n        </div>\n      ) : (\n        <Layout>\n          <div className=\"flex flex-col h-screen pt-8\">\n            <header className=\"bg-gradient-to-r from-purple-500 to-indigo-500 text-white p-4 rounded-t-lg shadow-lg relative mb-4\">\n              <Link to=\"/\" className=\"absolute left-4 flex items-center space-x-2 text-white hover:opacity-80\">\n                <ArrowLeftIcon className=\"w-5 h-5\" />\n                <span className=\"text-base font-medium\">Projects</span>\n              </Link>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <MotionGraphicsIcon className=\"w-6 h-6\" />\n                <span className=\"text-2xl font-semibold\">{title}</span>\n              </div>\n            </header>\n\n            <main className=\"flex-grow bg-slate-100 p-4 pt-8 overflow-auto\">\n              {children}\n            </main>\n          </div>\n        </Layout>\n      )}\n    </>\n  );\n};\n\nexport default ProjectDetail","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React from \"react\"\n\nexport const GamepadIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-6 h-6\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.875L5.999 12zm0 0h7.5\" />\n  </svg>\n);\n\nexport const CodeBracketIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-6 h-6\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5\" />\n  </svg>\n);\n\nexport const ArrowLeftIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-5 h-5 mr-2\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18\" />\n  </svg>\n);\n\nexport const GithubIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"w-5 h-5\">\n    <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\" />\n  </svg>\n);\n\nexport const MaximizeIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-5 h-5 mr-2\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9M20.25 20.25h-4.5m4.5 0v-4.5m0-4.5L15 15\" />\n  </svg>\n);\n\nexport const MotionGraphicsIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-6 h-6\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2.25\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 8.25h18\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 15.75h18\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8.25 3v18\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 3v18\" />\n  </svg>\n);","import React from \"react\"\nimport { GamepadIcon, GithubIcon } from \"../icons\"\nimport { Link } from \"gatsby\"\n\nconst Header = () => (\n  // 배경을 흰색으로, 그림자 유지, 텍스트 색상 어둡게\n  <header className=\"bg-white text-slate-800 shadow-lg sticky top-0 z-50\">\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-20\">\n      <Link to=\"/\">\n        <div className=\"flex items-center space-x-2 cursor-pointer\">\n            <GamepadIcon /> {/* 아이콘 색상은 부모 텍스트 색상을 따름 */}\n            <h2 className=\"text-2xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-purple-500 via-pink-500 to-red-500\">Projects Hub</h2>\n        </div>\n      </Link>\n      <nav className=\"flex items-center space-x-4 sm:space-x-6\">\n        <a href=\"https://github.com/silbaram/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center space-x-2 transition-colors duration-200\">\n          <GithubIcon />\n          <span>GitHub</span>\n        </a>\n      </nav>\n    </div>\n  </header>\n);\n\nexport default Header","import React from \"react\"\n\nconst Footer = () => (\n  // 배경을 밝은 회색으로, 텍스트 색상 어둡게\n  <footer className=\"bg-gray-100 text-gray-600 py-8 mt-auto border-t border-gray-200\">\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 text-center text-sm\">\n      &copy; {new Date().getFullYear()} Silbaram. All rights reserved.\n      <p className=\"mt-1\">Powered by React, Phaser & Gatsby.</p>\n    </div>\n  </footer>\n);\n\nexport default Footer","import * as React from \"react\"\nimport Header from \"./Header\"\nimport Footer from \"./Footer\"\n\nconst Layout = ({ children, isFullscreen }) => (\n  // 전체 배경 밝은 회색, 텍스트 색상 어둡게\n  <div className={`min-h-screen bg-gray-100 text-slate-900 flex flex-col font-sans ${isFullscreen ? 'overflow-hidden' : ''}`}>\n    {!isFullscreen && <Header />}\n    <main className={`flex-grow ${isFullscreen ? '' : ''}`}>\n      {children}\n    </main>\n    {!isFullscreen && <Footer />}\n  </div>\n);\n\nexport default Layout\n","import React, { useEffect, useRef } from \"react\"\nimport Seo from \"../../../components/Seo\"\nimport ProjectDetail from \"../../../components/ProjectDetail\"\nimport Phaser from \"phaser\"\n\nconst TetrisGame = () => {\n  const gameRef = useRef(null)\n  const gameInstance = useRef(null)\n\n  useEffect(() => {\n    class TetrisScene extends Phaser.Scene {\n      constructor() {\n        super({ key: \"TetrisScene\" })\n        this.gameState = \"start\" // 게임 상태: 'start', 'playing', 'gameover'\n        this.score = 0\n        this.level = 1\n        this.linesCleared = 0\n        this.dropInterval = 1000\n        this.lastDropTime = 0\n        this.board = []\n        this.currentPiece = null\n        this.nextPiece = null\n        this.gridSize = 32\n        this.boardWidth = 10\n        this.boardHeight = 20\n      }\n\n      preload() {\n        // 필요한 리소스 로드\n      }\n\n      create() {\n        // 입력 처리\n        this.input.keyboard.on(\"keydown\", this.handleInput, this)\n        this.input.on(\"pointerdown\", this.handlePointerDown, this)\n\n        // 점수 및 레벨 텍스트 생성\n        this.createText()\n\n        // 게임 시작 메시지 표시\n        this.showStartText()\n\n        // 구분선 그리기\n        this.drawSeparatorLine()\n      }\n\n      update(time) {\n        if (this.gameState === \"playing\") {\n          if (time > this.lastDropTime + this.dropInterval) {\n            this.movePieceDown()\n            this.lastDropTime = time\n          }\n        }\n      }\n\n      showStartText() {\n        this.startText = this.add.text(\n          this.sys.game.config.width / 2,\n          this.sys.game.config.height / 2,\n          \"게임 시작\",\n          { fontSize: \"40px\", fill: \"#ffffff\" }\n        )\n        this.startText.setOrigin(0.5)\n      }\n\n      handlePointerDown() {\n        if (this.gameState === \"start\") {\n          this.startGame()\n        } else if (this.gameState === \"gameover\") {\n          this.restartGame()\n        }\n      }\n\n      handleInput(event) {\n        event.preventDefault();\n        if (this.gameState === \"start\") {\n          this.startGame()\n        } else if (this.gameState === \"playing\") {\n          if (event.code === \"ArrowLeft\") {\n            this.movePiece(-1)\n          } else if (event.code === \"ArrowRight\") {\n            this.movePiece(1)\n          } else if (event.code === \"ArrowDown\") {\n            this.movePieceDown()\n          } else if (event.code === \"ArrowUp\") {\n            this.rotatePiece()\n          } else if (event.code === \"Space\") {\n            this.hardDrop()\n          }\n        } else if (this.gameState === \"gameover\") {\n          this.restartGame()\n        }\n      }\n\n      startGame() {\n        this.gameState = \"playing\"\n        if (this.startText) {\n          this.startText.destroy()\n        }\n\n        // 보드 초기화\n        this.board = Array.from({ length: this.boardHeight }, () =>\n          Array(this.boardWidth).fill(0)\n        )\n\n        // 게임 변수 초기화\n        this.score = 0\n        this.level = 1\n        this.linesCleared = 0\n        this.dropInterval = 1000\n        this.lastDropTime = 0\n        this.updateScore(0)\n        this.updateLevel()\n\n        // 테트로미노 모양 정의\n        this.tetrominoes = {\n          I: [\n            [\n              [0, 0, 0, 0],\n              [1, 1, 1, 1],\n              [0, 0, 0, 0],\n              [0, 0, 0, 0],\n            ],\n          ],\n          O: [\n            [\n              [1, 1],\n              [1, 1],\n            ],\n          ],\n          T: [\n            [\n              [0, 1, 0],\n              [1, 1, 1],\n              [0, 0, 0],\n            ],\n          ],\n          S: [\n            [\n              [0, 1, 1],\n              [1, 1, 0],\n              [0, 0, 0],\n            ],\n          ],\n          Z: [\n            [\n              [1, 1, 0],\n              [0, 1, 1],\n              [0, 0, 0],\n            ],\n          ],\n          J: [\n            [\n              [1, 0, 0],\n              [1, 1, 1],\n              [0, 0, 0],\n            ],\n          ],\n          L: [\n            [\n              [0, 0, 1],\n              [1, 1, 1],\n              [0, 0, 0],\n            ],\n          ],\n        }\n\n        // 현재 블록과 다음 블록 설정\n        this.nextPiece = this.createRandomPiece()\n        this.spawnPiece()\n\n        // 보드 및 다음 블록 그리기\n        this.drawBoard()\n        this.drawNextPiece()\n      }\n\n      endGame() {\n        this.gameState = \"gameover\"\n        this.gameOverText = this.add.text(\n          this.sys.game.config.width / 2,\n          this.sys.game.config.height / 2,\n          \"게임 오버\",\n          { fontSize: \"40px\", fill: \"#ff0000\" }\n        )\n        this.gameOverText.setOrigin(0.5)\n      }\n\n      restartGame() {\n        if (this.gameOverText) {\n          this.gameOverText.destroy()\n        }\n        this.startGame()\n      }\n\n      createRandomPiece() {\n        const keys = Object.keys(this.tetrominoes)\n        const randomKey = keys[Math.floor(Math.random() * keys.length)]\n        const shape = this.tetrominoes[randomKey][0]\n        return {\n          shape,\n          x: Math.floor((this.boardWidth - shape[0].length) / 2),\n          y: 0,\n          rotationIndex: 0,\n          tetrominoKey: randomKey,\n        }\n      }\n\n      spawnPiece() {\n        this.currentPiece = this.nextPiece\n        this.currentPiece.x = Math.floor(\n          (this.boardWidth - this.currentPiece.shape[0].length) / 2\n        )\n        this.currentPiece.y = 0\n        this.nextPiece = this.createRandomPiece()\n\n        if (this.checkCollision()) {\n          // 게임 오버 처리\n          this.endGame()\n        } else {\n          this.drawBoard()\n          this.drawNextPiece()\n        }\n      }\n\n      movePiece(direction) {\n        this.currentPiece.x += direction\n        if (this.checkCollision()) {\n          this.currentPiece.x -= direction\n        } else {\n          this.drawBoard()\n        }\n      }\n\n      movePieceDown() {\n        this.currentPiece.y += 1\n        if (this.checkCollision()) {\n          this.currentPiece.y -= 1\n          this.lockPiece()\n          this.clearLines()\n          this.spawnPiece()\n        } else {\n          this.drawBoard()\n        }\n      }\n\n      hardDrop() {\n        while (!this.checkCollision()) {\n          this.currentPiece.y += 1\n        }\n        this.currentPiece.y -= 1\n        this.lockPiece()\n        this.clearLines()\n        this.spawnPiece()\n      }\n\n      rotatePiece() {\n        const oldRotation = this.currentPiece.rotationIndex\n        this.currentPiece.rotationIndex =\n          (this.currentPiece.rotationIndex + 1) % 4\n        this.currentPiece.shape = this.getRotatedShape(\n          this.currentPiece.tetrominoKey,\n          this.currentPiece.rotationIndex\n        )\n\n        if (this.checkCollision()) {\n          this.currentPiece.rotationIndex = oldRotation\n          this.currentPiece.shape = this.getRotatedShape(\n            this.currentPiece.tetrominoKey,\n            this.currentPiece.rotationIndex\n          )\n        } else {\n          this.drawBoard()\n        }\n      }\n\n      getRotatedShape(tetrominoKey, rotationIndex) {\n        const shapes = this.tetrominoes[tetrominoKey]\n        if (shapes[rotationIndex]) {\n          return shapes[rotationIndex]\n        } else {\n          // 회전된 모양 생성\n          let shape = shapes[0]\n          for (let i = 0; i < rotationIndex; i++) {\n            shape = this.rotateMatrix(shape)\n          }\n          shapes[rotationIndex] = shape\n          return shape\n        }\n      }\n\n      rotateMatrix(matrix) {\n        return matrix[0].map((val, index) =>\n          matrix.map(row => row[index]).reverse()\n        )\n      }\n\n      checkCollision() {\n        const { shape, x: posX, y: posY } = this.currentPiece\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              const boardX = posX + x\n              const boardY = posY + y\n              if (\n                boardX < 0 ||\n                boardX >= this.boardWidth ||\n                boardY >= this.boardHeight ||\n                (boardY >= 0 && this.board[boardY][boardX])\n              ) {\n                return true\n              }\n            }\n          }\n        }\n        return false\n      }\n\n      lockPiece() {\n        const { shape, x: posX, y: posY } = this.currentPiece\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              const boardX = posX + x\n              const boardY = posY + y\n              if (this.board[boardY]) {\n                this.board[boardY][boardX] = shape[y][x]\n              }\n            }\n          }\n        }\n      }\n\n      clearLines() {\n        let lines = 0\n        for (let y = this.boardHeight - 1; y >= 0; y--) {\n          if (this.board[y].every(cell => cell !== 0)) {\n            this.board.splice(y, 1)\n            this.board.unshift(Array(this.boardWidth).fill(0))\n            lines++\n            y++\n          }\n        }\n\n        if (lines > 0) {\n          this.linesCleared += lines\n          this.updateScore(lines)\n          this.updateLevel()\n        }\n      }\n\n      updateScore(lines) {\n        const lineScores = [0, 100, 300, 500, 800]\n        this.score += lineScores[lines]\n        this.scoreText.setText(`점수: ${this.score}`)\n      }\n\n      updateLevel() {\n        const newLevel = Math.floor(this.linesCleared / 10) + 1\n        if (newLevel > this.level && newLevel <= 10) {\n          this.level = newLevel\n          this.levelText.setText(`레벨: ${this.level}`)\n          this.dropInterval = 1000 - (this.level - 1) * 100\n        }\n      }\n\n      drawBoard() {\n        if (this.graphics) {\n          this.graphics.clear()\n        } else {\n          this.graphics = this.add.graphics()\n        }\n\n        // 배경색 채우기 (게임 보드 영역만)\n        this.graphics.fillStyle(0x000000)\n        this.graphics.fillRect(\n          0,\n          0,\n          this.boardWidth * this.gridSize,\n          this.boardHeight * this.gridSize\n        )\n\n        // 보드 그리기\n        for (let y = 0; y < this.boardHeight; y++) {\n          for (let x = 0; x < this.boardWidth; x++) {\n            if (this.board[y][x]) {\n              this.graphics.fillStyle(0xffffff)\n              this.graphics.fillRect(\n                x * this.gridSize,\n                y * this.gridSize,\n                this.gridSize - 1,\n                this.gridSize - 1\n              )\n            }\n          }\n        }\n\n        // 현재 블록 그리기\n        const { shape, x: posX, y: posY } = this.currentPiece\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              this.graphics.fillStyle(0xff0000)\n              this.graphics.fillRect(\n                (posX + x) * this.gridSize,\n                (posY + y) * this.gridSize,\n                this.gridSize - 1,\n                this.gridSize - 1\n              )\n            }\n          }\n        }\n      }\n\n      drawNextPiece() {\n        if (this.nextPieceGraphics) {\n          this.nextPieceGraphics.clear()\n        } else {\n          this.nextPieceGraphics = this.add.graphics()\n        }\n        this.nextPieceGraphics.clear()\n\n        const offsetX = this.boardWidth * this.gridSize + 10 // 게임 보드 오른쪽 밖으로 이동\n        const offsetY = 150 // 이전보다 아래로 조정\n\n        const { shape } = this.nextPiece\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              this.nextPieceGraphics.fillStyle(0x00ff00)\n              this.nextPieceGraphics.fillRect(\n                offsetX + x * (this.gridSize / 2),\n                offsetY + y * (this.gridSize / 2),\n                this.gridSize / 2 - 1,\n                this.gridSize / 2 - 1\n              )\n            }\n          }\n        }\n\n        // \"다음 블록\" 텍스트 표시\n        if (!this.nextText) {\n          this.nextText = this.add.text(offsetX, offsetY - 30, \"다음 블록:\", {\n            fontSize: \"20px\",\n            fill: \"#fff\",\n          })\n        } else {\n          this.nextText.setPosition(offsetX, offsetY - 30)\n        }\n      }\n\n      createText() {\n        const textOffsetX = this.boardWidth * this.gridSize + 10 // 게임 보드 오른쪽 밖으로 이동\n        this.scoreText = this.add.text(textOffsetX, 10, \"점수: 0\", {\n          fontSize: \"20px\",\n          fill: \"#fff\",\n        })\n        this.levelText = this.add.text(textOffsetX, 40, \"레벨: 1\", {\n          fontSize: \"20px\",\n          fill: \"#fff\",\n        })\n      }\n\n      drawSeparatorLine() {\n        if (!this.separatorGraphics) {\n          this.separatorGraphics = this.add.graphics()\n        }\n        this.separatorGraphics.lineStyle(2, 0xffffff, 1)\n        this.separatorGraphics.beginPath()\n        this.separatorGraphics.moveTo(this.boardWidth * this.gridSize, 0)\n        this.separatorGraphics.lineTo(\n          this.boardWidth * this.gridSize,\n          this.boardHeight * this.gridSize\n        )\n        this.separatorGraphics.closePath()\n        this.separatorGraphics.strokePath()\n      }\n    }\n\n    const config = {\n      type: Phaser.AUTO,\n      width: 14 * 32, // 너비를 늘려 오른쪽에 공간 추가\n      height: 20 * 32,\n      parent: gameRef.current,\n      scene: TetrisScene,\n    }\n\n    const game = new Phaser.Game(config)\n    gameInstance.current = game\n\n    return () => {\n      if (gameInstance.current) {\n        gameInstance.current.destroy(true)\n        gameInstance.current = null\n      }\n    }\n  }, [])\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\n      <div ref={gameRef}></div>\n    </div>\n  )\n}\n\nconst TetrisGameApp = ({ location }) => {\n  const isFullscreen = location?.state?.isFullscreen ?? true\n  return (\n    <ProjectDetail title={\"테트리스 게임\"} isFullscreen={isFullscreen}>\n      <div>\n        <TetrisGame />\n      </div>\n    </ProjectDetail>\n  )\n}\n\nexport const Head = () => (\n  <Seo\n    title=\"Tetris Game\"\n    description=\"A Tetris game that you can easily enjoy when you're bored.\"\n    keywords={[\"Tetris Game\", \"WebGame\"]}\n  />\n)\nexport default TetrisGameApp;"],"names":["title","isFullscreen","children","className","Link","to","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","author","GamepadIcon","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","CodeBracketIcon","ArrowLeftIcon","GithubIcon","MotionGraphicsIcon","x","y","width","height","rx","href","target","rel","Date","getFullYear","Header","TetrisGame","gameRef","useRef","gameInstance","useEffect","TetrisScene","key","gameState","score","level","linesCleared","dropInterval","lastDropTime","board","currentPiece","nextPiece","gridSize","boardWidth","boardHeight","preload","create","this","input","keyboard","on","handleInput","handlePointerDown","createText","showStartText","drawSeparatorLine","update","time","movePieceDown","startText","add","text","sys","game","config","fontSize","setOrigin","startGame","restartGame","event","preventDefault","code","movePiece","rotatePiece","hardDrop","destroy","Array","from","length","updateScore","updateLevel","tetrominoes","I","O","T","S","Z","J","L","createRandomPiece","spawnPiece","drawBoard","drawNextPiece","endGame","gameOverText","keys","Object","randomKey","Math","floor","random","shape","rotationIndex","tetrominoKey","checkCollision","direction","lockPiece","clearLines","oldRotation","getRotatedShape","shapes","i","rotateMatrix","matrix","map","val","index","row","reverse","posX","posY","boardX","boardY","lines","every","cell","splice","unshift","scoreText","setText","newLevel","levelText","graphics","clear","fillStyle","fillRect","nextPieceGraphics","offsetX","nextText","setPosition","offsetY","textOffsetX","separatorGraphics","lineStyle","beginPath","moveTo","lineTo","closePath","strokePath","Phaser","type","parent","current","scene","style","display","justifyContent","ref","Head","keywords","location","state"],"sourceRoot":""}