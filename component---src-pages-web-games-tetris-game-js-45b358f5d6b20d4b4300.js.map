{"version":3,"file":"component---src-pages-web-games-tetris-game-js-45b358f5d6b20d4b4300.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/header.js","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/components/tetris-game/TetrisGame.js","webpack://gatsby-starter-default/./src/pages/web-games/tetris-game.js"],"sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `#20232a`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n    <meta name=\"google-site-verification\" content=\"wg-ONgbuHGSWXfx53JZPkFrmyKqPONIUdnzCVvw1hCY\" />\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: `var(--size-content)`,\n          padding: `var(--size-gutter)`,\n        }}\n      >\n        <main>{children}</main>\n        <footer\n          style={{\n            marginTop: `var(--space-5)`,\n            fontSize: `var(--font-sm)`,\n          }}\n        >\n          © {new Date().getFullYear()} &middot; Built with\n          {` `}\n          silbaram\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React, { useEffect, useRef } from 'react';\nimport Phaser from 'phaser';\n\nconst TetrisGame = () => {\n  const gameRef = useRef(null);\n  const gameInstance = useRef(null);\n\n  useEffect(() => {\n    class TetrisScene extends Phaser.Scene {\n      constructor() {\n        super({ key: 'TetrisScene' });\n        this.gameState = 'start'; // 게임 상태: 'start', 'playing', 'gameover'\n        this.score = 0;\n        this.level = 1;\n        this.linesCleared = 0;\n        this.dropInterval = 1000;\n        this.lastDropTime = 0;\n        this.board = [];\n        this.currentPiece = null;\n        this.nextPiece = null;\n        this.gridSize = 32;\n        this.boardWidth = 10;\n        this.boardHeight = 20;\n      }\n\n      preload() {\n        // 필요한 리소스 로드\n      }\n\n      create() {\n        // 입력 처리\n        this.input.keyboard.on('keydown', this.handleInput, this);\n        this.input.on('pointerdown', this.handlePointerDown, this);\n\n        // 점수 및 레벨 텍스트 생성\n        this.createText();\n\n        // 게임 시작 메시지 표시\n        this.showStartText();\n\n        // 구분선 그리기\n        this.drawSeparatorLine();\n      }\n\n      update(time) {\n        if (this.gameState === 'playing') {\n          if (time > this.lastDropTime + this.dropInterval) {\n            this.movePieceDown();\n            this.lastDropTime = time;\n          }\n        }\n      }\n\n      showStartText() {\n        this.startText = this.add.text(\n          this.sys.game.config.width / 2,\n          this.sys.game.config.height / 2,\n          '게임 시작',\n          { fontSize: '40px', fill: '#ffffff' }\n        );\n        this.startText.setOrigin(0.5);\n      }\n\n      handlePointerDown() {\n        if (this.gameState === 'start') {\n          this.startGame();\n        } else if (this.gameState === 'gameover') {\n          this.restartGame();\n        }\n      }\n\n      handleInput(event) {\n        if (this.gameState === 'start') {\n          this.startGame();\n        } else if (this.gameState === 'playing') {\n          if (event.code === 'ArrowLeft') {\n            this.movePiece(-1);\n          } else if (event.code === 'ArrowRight') {\n            this.movePiece(1);\n          } else if (event.code === 'ArrowDown') {\n            this.movePieceDown();\n          } else if (event.code === 'ArrowUp') {\n            this.rotatePiece();\n          } else if (event.code === 'Space') {\n            this.hardDrop();\n          }\n        } else if (this.gameState === 'gameover') {\n          this.restartGame();\n        }\n      }\n\n      startGame() {\n        this.gameState = 'playing';\n        if (this.startText) {\n          this.startText.destroy();\n        }\n\n        // 보드 초기화\n        this.board = Array.from({ length: this.boardHeight }, () =>\n          Array(this.boardWidth).fill(0)\n        );\n\n        // 게임 변수 초기화\n        this.score = 0;\n        this.level = 1;\n        this.linesCleared = 0;\n        this.dropInterval = 1000;\n        this.lastDropTime = 0;\n        this.updateScore(0);\n        this.updateLevel();\n\n        // 테트로미노 모양 정의\n        this.tetrominoes = {\n          I: [\n            [[0, 0, 0, 0],\n             [1, 1, 1, 1],\n             [0, 0, 0, 0],\n             [0, 0, 0, 0]],\n          ],\n          O: [\n            [[1, 1],\n             [1, 1]],\n          ],\n          T: [\n            [[0, 1, 0],\n             [1, 1, 1],\n             [0, 0, 0]],\n          ],\n          S: [\n            [[0, 1, 1],\n             [1, 1, 0],\n             [0, 0, 0]],\n          ],\n          Z: [\n            [[1, 1, 0],\n             [0, 1, 1],\n             [0, 0, 0]],\n          ],\n          J: [\n            [[1, 0, 0],\n             [1, 1, 1],\n             [0, 0, 0]],\n          ],\n          L: [\n            [[0, 0, 1],\n             [1, 1, 1],\n             [0, 0, 0]],\n          ],\n        };\n\n        // 현재 블록과 다음 블록 설정\n        this.nextPiece = this.createRandomPiece();\n        this.spawnPiece();\n\n        // 보드 및 다음 블록 그리기\n        this.drawBoard();\n        this.drawNextPiece();\n      }\n\n      endGame() {\n        this.gameState = 'gameover';\n        this.gameOverText = this.add.text(\n          this.sys.game.config.width / 2,\n          this.sys.game.config.height / 2,\n          '게임 오버',\n          { fontSize: '40px', fill: '#ff0000' }\n        );\n        this.gameOverText.setOrigin(0.5);\n      }\n\n      restartGame() {\n        if (this.gameOverText) {\n          this.gameOverText.destroy();\n        }\n        this.startGame();\n      }\n\n      createRandomPiece() {\n        const keys = Object.keys(this.tetrominoes);\n        const randomKey = keys[Math.floor(Math.random() * keys.length)];\n        const shape = this.tetrominoes[randomKey][0];\n        return {\n          shape,\n          x: Math.floor((this.boardWidth - shape[0].length) / 2),\n          y: 0,\n          rotationIndex: 0,\n          tetrominoKey: randomKey,\n        };\n      }\n\n      spawnPiece() {\n        this.currentPiece = this.nextPiece;\n        this.currentPiece.x = Math.floor(\n          (this.boardWidth - this.currentPiece.shape[0].length) / 2\n        );\n        this.currentPiece.y = 0;\n        this.nextPiece = this.createRandomPiece();\n\n        if (this.checkCollision()) {\n          // 게임 오버 처리\n          this.endGame();\n        } else {\n          this.drawBoard();\n          this.drawNextPiece();\n        }\n      }\n\n      movePiece(direction) {\n        this.currentPiece.x += direction;\n        if (this.checkCollision()) {\n          this.currentPiece.x -= direction;\n        } else {\n          this.drawBoard();\n        }\n      }\n\n      movePieceDown() {\n        this.currentPiece.y += 1;\n        if (this.checkCollision()) {\n          this.currentPiece.y -= 1;\n          this.lockPiece();\n          this.clearLines();\n          this.spawnPiece();\n        } else {\n          this.drawBoard();\n        }\n      }\n\n      hardDrop() {\n        while (!this.checkCollision()) {\n          this.currentPiece.y += 1;\n        }\n        this.currentPiece.y -= 1;\n        this.lockPiece();\n        this.clearLines();\n        this.spawnPiece();\n      }\n\n      rotatePiece() {\n        const oldRotation = this.currentPiece.rotationIndex;\n        this.currentPiece.rotationIndex = (this.currentPiece.rotationIndex + 1) % 4;\n        this.currentPiece.shape = this.getRotatedShape(\n          this.currentPiece.tetrominoKey,\n          this.currentPiece.rotationIndex\n        );\n\n        if (this.checkCollision()) {\n          this.currentPiece.rotationIndex = oldRotation;\n          this.currentPiece.shape = this.getRotatedShape(\n            this.currentPiece.tetrominoKey,\n            this.currentPiece.rotationIndex\n          );\n        } else {\n          this.drawBoard();\n        }\n      }\n\n      getRotatedShape(tetrominoKey, rotationIndex) {\n        const shapes = this.tetrominoes[tetrominoKey];\n        if (shapes[rotationIndex]) {\n          return shapes[rotationIndex];\n        } else {\n          // 회전된 모양 생성\n          let shape = shapes[0];\n          for (let i = 0; i < rotationIndex; i++) {\n            shape = this.rotateMatrix(shape);\n          }\n          shapes[rotationIndex] = shape;\n          return shape;\n        }\n      }\n\n      rotateMatrix(matrix) {\n        return matrix[0].map((val, index) =>\n          matrix.map(row => row[index]).reverse()\n        );\n      }\n\n      checkCollision() {\n        const { shape, x: posX, y: posY } = this.currentPiece;\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              const boardX = posX + x;\n              const boardY = posY + y;\n              if (\n                boardX < 0 ||\n                boardX >= this.boardWidth ||\n                boardY >= this.boardHeight ||\n                (boardY >= 0 && this.board[boardY][boardX])\n              ) {\n                return true;\n              }\n            }\n          }\n        }\n        return false;\n      }\n\n      lockPiece() {\n        const { shape, x: posX, y: posY } = this.currentPiece;\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              const boardX = posX + x;\n              const boardY = posY + y;\n              if (this.board[boardY]) {\n                this.board[boardY][boardX] = shape[y][x];\n              }\n            }\n          }\n        }\n      }\n\n      clearLines() {\n        let lines = 0;\n        for (let y = this.boardHeight - 1; y >= 0; y--) {\n          if (this.board[y].every(cell => cell !== 0)) {\n            this.board.splice(y, 1);\n            this.board.unshift(Array(this.boardWidth).fill(0));\n            lines++;\n            y++;\n          }\n        }\n\n        if (lines > 0) {\n          this.linesCleared += lines;\n          this.updateScore(lines);\n          this.updateLevel();\n        }\n      }\n\n      updateScore(lines) {\n        const lineScores = [0, 100, 300, 500, 800];\n        this.score += lineScores[lines];\n        this.scoreText.setText(`점수: ${this.score}`);\n      }\n\n      updateLevel() {\n        const newLevel = Math.floor(this.linesCleared / 10) + 1;\n        if (newLevel > this.level && newLevel <= 10) {\n          this.level = newLevel;\n          this.levelText.setText(`레벨: ${this.level}`);\n          this.dropInterval = 1000 - (this.level - 1) * 100;\n        }\n      }\n\n      drawBoard() {\n        if (this.graphics) {\n          this.graphics.clear();\n        } else {\n          this.graphics = this.add.graphics();\n        }\n\n        // 배경색 채우기 (게임 보드 영역만)\n        this.graphics.fillStyle(0x000000);\n        this.graphics.fillRect(\n          0,\n          0,\n          this.boardWidth * this.gridSize,\n          this.boardHeight * this.gridSize\n        );\n\n        // 보드 그리기\n        for (let y = 0; y < this.boardHeight; y++) {\n          for (let x = 0; x < this.boardWidth; x++) {\n            if (this.board[y][x]) {\n              this.graphics.fillStyle(0xffffff);\n              this.graphics.fillRect(\n                x * this.gridSize,\n                y * this.gridSize,\n                this.gridSize - 1,\n                this.gridSize - 1\n              );\n            }\n          }\n        }\n\n        // 현재 블록 그리기\n        const { shape, x: posX, y: posY } = this.currentPiece;\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              this.graphics.fillStyle(0xff0000);\n              this.graphics.fillRect(\n                (posX + x) * this.gridSize,\n                (posY + y) * this.gridSize,\n                this.gridSize - 1,\n                this.gridSize - 1\n              );\n            }\n          }\n        }\n      }\n\n      drawNextPiece() {\n        if (this.nextPieceGraphics) {\n          this.nextPieceGraphics.clear();\n        } else {\n          this.nextPieceGraphics = this.add.graphics();\n        }\n        this.nextPieceGraphics.clear();\n\n        const offsetX = this.boardWidth * this.gridSize + 10; // 게임 보드 오른쪽 밖으로 이동\n        const offsetY = 150; // 이전보다 아래로 조정\n\n        const { shape } = this.nextPiece;\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              this.nextPieceGraphics.fillStyle(0x00ff00);\n              this.nextPieceGraphics.fillRect(\n                offsetX + x * (this.gridSize / 2),\n                offsetY + y * (this.gridSize / 2),\n                (this.gridSize / 2) - 1,\n                (this.gridSize / 2) - 1\n              );\n            }\n          }\n        }\n\n        // \"다음 블록\" 텍스트 표시\n        if (!this.nextText) {\n          this.nextText = this.add.text(\n            offsetX,\n            offsetY - 30,\n            '다음 블록:',\n            { fontSize: '20px', fill: '#fff' }\n          );\n        } else {\n          this.nextText.setPosition(offsetX, offsetY - 30);\n        }\n      }\n\n      createText() {\n        const textOffsetX = this.boardWidth * this.gridSize + 10; // 게임 보드 오른쪽 밖으로 이동\n        this.scoreText = this.add.text(textOffsetX, 10, '점수: 0', {\n          fontSize: '20px',\n          fill: '#fff',\n        });\n        this.levelText = this.add.text(textOffsetX, 40, '레벨: 1', {\n          fontSize: '20px',\n          fill: '#fff',\n        });\n      }\n\n      drawSeparatorLine() {\n        if (!this.separatorGraphics) {\n          this.separatorGraphics = this.add.graphics();\n        }\n        this.separatorGraphics.lineStyle(2, 0xffffff, 1);\n        this.separatorGraphics.beginPath();\n        this.separatorGraphics.moveTo(this.boardWidth * this.gridSize, 0);\n        this.separatorGraphics.lineTo(\n          this.boardWidth * this.gridSize,\n          this.boardHeight * this.gridSize\n        );\n        this.separatorGraphics.closePath();\n        this.separatorGraphics.strokePath();\n      }\n    }\n\n    const config = {\n      type: Phaser.AUTO,\n      width: 14 * 32, // 너비를 늘려 오른쪽에 공간 추가\n      height: 20 * 32,\n      parent: gameRef.current,\n      scene: TetrisScene,\n    };\n\n    const game = new Phaser.Game(config);\n    gameInstance.current = game;\n\n    return () => {\n      if (gameInstance.current) {\n        gameInstance.current.destroy(true);\n        gameInstance.current = null;\n      }\n    };\n  }, []);\n\n  return <div ref={gameRef}></div>;\n};\n\nexport default TetrisGame;","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport Layout from \"../../components/layout\";\nimport Seo from \"../../components/seo\";\nimport TetrisGame from \"../../components/tetris-game/TetrisGame\";\n\nconst TetrisGameApp = () => {\n    return (\n        <Layout>\n            <div>\n                <h1>테트리스 게임</h1>\n                <TetrisGame />\n            </div>\n\n            <br />\n            <Link to=\"/\">Go back to the homepage</Link>\n        </Layout>\n    );\n}\n\nexport const Head = () => <Seo title=\"This is a minesweeper game that you can easily play when you're bored.\" />\n\nexport default TetrisGameApp;"],"names":["Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","Link","to","color","textDecoration","name","content","defaultProps","children","data","useStaticQuery","site","siteMetadata","title","marginTop","fontSize","Date","getFullYear","description","metaDescription","defaultTitle","property","author","gameRef","useRef","gameInstance","useEffect","TetrisScene","key","gameState","score","level","linesCleared","dropInterval","lastDropTime","board","currentPiece","nextPiece","gridSize","boardWidth","boardHeight","preload","create","this","input","keyboard","on","handleInput","handlePointerDown","createText","showStartText","drawSeparatorLine","update","time","movePieceDown","startText","add","text","sys","game","config","width","height","fill","setOrigin","startGame","restartGame","event","code","movePiece","rotatePiece","hardDrop","destroy","Array","from","length","updateScore","updateLevel","tetrominoes","I","O","T","S","Z","J","L","createRandomPiece","spawnPiece","drawBoard","drawNextPiece","endGame","gameOverText","keys","Object","randomKey","Math","floor","random","shape","x","y","rotationIndex","tetrominoKey","checkCollision","direction","lockPiece","clearLines","oldRotation","getRotatedShape","shapes","i","rotateMatrix","matrix","map","val","index","row","reverse","posX","posY","boardX","boardY","lines","every","cell","splice","unshift","scoreText","setText","newLevel","levelText","graphics","clear","fillStyle","fillRect","nextPieceGraphics","offsetX","nextText","setPosition","offsetY","textOffsetX","separatorGraphics","lineStyle","beginPath","moveTo","lineTo","closePath","strokePath","Phaser","type","parent","current","scene","ref","Head"],"sourceRoot":""}