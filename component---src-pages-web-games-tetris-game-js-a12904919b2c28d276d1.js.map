{"version":3,"file":"component---src-pages-web-games-tetris-game-js-a12904919b2c28d276d1.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/icons.jsx","webpack://gatsby-starter-default/./src/components/layout/header.js","webpack://gatsby-starter-default/./src/components/layout/footer.js","webpack://gatsby-starter-default/./src/components/layout/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/components/tetris-game/TetrisGame.js","webpack://gatsby-starter-default/./src/pages/web-games/tetris-game.js"],"sourcesContent":["import React from \"react\"\n\nexport const GamepadIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-6 h-6\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.875L5.999 12zm0 0h7.5\" />\n  </svg>\n);\n\nexport const CodeBracketIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-6 h-6\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5\" />\n  </svg>\n);\n\nexport const ArrowLeftIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-5 h-5 mr-2\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18\" />\n  </svg>\n);\n\nexport const GithubIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"w-5 h-5\">\n    <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\" />\n  </svg>\n);\n\nexport const MaximizeIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-5 h-5 mr-2\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9M20.25 20.25h-4.5m4.5 0v-4.5m0-4.5L15 15\" />\n  </svg>\n);\n\nexport const MotionGraphicsIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-6 h-6\">\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2.25\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 8.25h18\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 15.75h18\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8.25 3v18\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 3v18\" />\n  </svg>\n);","import React from \"react\"\nimport { GamepadIcon, GithubIcon } from \"../icons\"\nimport { Link } from \"gatsby\"\n\nconst Header = () => (\n  // 배경을 흰색으로, 그림자 유지, 텍스트 색상 어둡게\n  <header className=\"bg-white text-slate-800 shadow-lg sticky top-0 z-50\">\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-20\">\n      <Link to=\"/\">\n        <div className=\"flex items-center space-x-2 cursor-pointer\">\n            <GamepadIcon /> {/* 아이콘 색상은 부모 텍스트 색상을 따름 */}\n            <h2 className=\"text-2xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-purple-500 via-pink-500 to-red-500\">Projects Hub</h2>\n        </div>\n      </Link>\n      <nav className=\"flex items-center space-x-4 sm:space-x-6\">\n        <a href=\"https://github.com/silbaram/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center space-x-2 transition-colors duration-200\">\n          <GithubIcon />\n          <span>GitHub</span>\n        </a>\n      </nav>\n    </div>\n  </header>\n);\n\nexport default Header","import React from \"react\"\n\nconst Footer = () => (\n  // 배경을 밝은 회색으로, 텍스트 색상 어둡게\n  <footer className=\"bg-gray-100 text-gray-600 py-8 mt-auto border-t border-gray-200\">\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 text-center text-sm\">\n      &copy; {new Date().getFullYear()} Silbaram. All rights reserved.\n      <p className=\"mt-1\">Powered by React, Phaser & Gatsby.</p>\n    </div>\n  </footer>\n);\n\nexport default Footer","import * as React from \"react\"\nimport Header from \"./header\"\nimport Footer from \"./footer\"\n\nconst Layout = ({ children, isFullscreen }) => (\n  // 전체 배경 밝은 회색, 텍스트 색상 어둡게\n  <div className={`min-h-screen bg-gray-100 text-slate-900 flex flex-col font-sans ${isFullscreen ? 'overflow-hidden' : ''}`}>\n    {!isFullscreen && <Header />}\n    <main className={`flex-grow ${isFullscreen ? '' : ''}`}>\n      {children}\n    </main>\n    {!isFullscreen && <Footer />}\n  </div>\n);\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React, { useEffect, useRef } from 'react';\nimport Phaser from 'phaser';\n\nconst TetrisGame = () => {\n  const gameRef = useRef(null);\n  const gameInstance = useRef(null);\n\n  useEffect(() => {\n    class TetrisScene extends Phaser.Scene {\n      constructor() {\n        super({ key: 'TetrisScene' });\n        this.gameState = 'start'; // 게임 상태: 'start', 'playing', 'gameover'\n        this.score = 0;\n        this.level = 1;\n        this.linesCleared = 0;\n        this.dropInterval = 1000;\n        this.lastDropTime = 0;\n        this.board = [];\n        this.currentPiece = null;\n        this.nextPiece = null;\n        this.gridSize = 32;\n        this.boardWidth = 10;\n        this.boardHeight = 20;\n      }\n\n      preload() {\n        // 필요한 리소스 로드\n      }\n\n      create() {\n        // 입력 처리\n        this.input.keyboard.on('keydown', this.handleInput, this);\n        this.input.on('pointerdown', this.handlePointerDown, this);\n\n        // 점수 및 레벨 텍스트 생성\n        this.createText();\n\n        // 게임 시작 메시지 표시\n        this.showStartText();\n\n        // 구분선 그리기\n        this.drawSeparatorLine();\n      }\n\n      update(time) {\n        if (this.gameState === 'playing') {\n          if (time > this.lastDropTime + this.dropInterval) {\n            this.movePieceDown();\n            this.lastDropTime = time;\n          }\n        }\n      }\n\n      showStartText() {\n        this.startText = this.add.text(\n          this.sys.game.config.width / 2,\n          this.sys.game.config.height / 2,\n          '게임 시작',\n          { fontSize: '40px', fill: '#ffffff' }\n        );\n        this.startText.setOrigin(0.5);\n      }\n\n      handlePointerDown() {\n        if (this.gameState === 'start') {\n          this.startGame();\n        } else if (this.gameState === 'gameover') {\n          this.restartGame();\n        }\n      }\n\n      handleInput(event) {\n        if (this.gameState === 'start') {\n          this.startGame();\n        } else if (this.gameState === 'playing') {\n          if (event.code === 'ArrowLeft') {\n            this.movePiece(-1);\n          } else if (event.code === 'ArrowRight') {\n            this.movePiece(1);\n          } else if (event.code === 'ArrowDown') {\n            this.movePieceDown();\n          } else if (event.code === 'ArrowUp') {\n            this.rotatePiece();\n          } else if (event.code === 'Space') {\n            this.hardDrop();\n          }\n        } else if (this.gameState === 'gameover') {\n          this.restartGame();\n        }\n      }\n\n      startGame() {\n        this.gameState = 'playing';\n        if (this.startText) {\n          this.startText.destroy();\n        }\n\n        // 보드 초기화\n        this.board = Array.from({ length: this.boardHeight }, () =>\n          Array(this.boardWidth).fill(0)\n        );\n\n        // 게임 변수 초기화\n        this.score = 0;\n        this.level = 1;\n        this.linesCleared = 0;\n        this.dropInterval = 1000;\n        this.lastDropTime = 0;\n        this.updateScore(0);\n        this.updateLevel();\n\n        // 테트로미노 모양 정의\n        this.tetrominoes = {\n          I: [\n            [[0, 0, 0, 0],\n             [1, 1, 1, 1],\n             [0, 0, 0, 0],\n             [0, 0, 0, 0]],\n          ],\n          O: [\n            [[1, 1],\n             [1, 1]],\n          ],\n          T: [\n            [[0, 1, 0],\n             [1, 1, 1],\n             [0, 0, 0]],\n          ],\n          S: [\n            [[0, 1, 1],\n             [1, 1, 0],\n             [0, 0, 0]],\n          ],\n          Z: [\n            [[1, 1, 0],\n             [0, 1, 1],\n             [0, 0, 0]],\n          ],\n          J: [\n            [[1, 0, 0],\n             [1, 1, 1],\n             [0, 0, 0]],\n          ],\n          L: [\n            [[0, 0, 1],\n             [1, 1, 1],\n             [0, 0, 0]],\n          ],\n        };\n\n        // 현재 블록과 다음 블록 설정\n        this.nextPiece = this.createRandomPiece();\n        this.spawnPiece();\n\n        // 보드 및 다음 블록 그리기\n        this.drawBoard();\n        this.drawNextPiece();\n      }\n\n      endGame() {\n        this.gameState = 'gameover';\n        this.gameOverText = this.add.text(\n          this.sys.game.config.width / 2,\n          this.sys.game.config.height / 2,\n          '게임 오버',\n          { fontSize: '40px', fill: '#ff0000' }\n        );\n        this.gameOverText.setOrigin(0.5);\n      }\n\n      restartGame() {\n        if (this.gameOverText) {\n          this.gameOverText.destroy();\n        }\n        this.startGame();\n      }\n\n      createRandomPiece() {\n        const keys = Object.keys(this.tetrominoes);\n        const randomKey = keys[Math.floor(Math.random() * keys.length)];\n        const shape = this.tetrominoes[randomKey][0];\n        return {\n          shape,\n          x: Math.floor((this.boardWidth - shape[0].length) / 2),\n          y: 0,\n          rotationIndex: 0,\n          tetrominoKey: randomKey,\n        };\n      }\n\n      spawnPiece() {\n        this.currentPiece = this.nextPiece;\n        this.currentPiece.x = Math.floor(\n          (this.boardWidth - this.currentPiece.shape[0].length) / 2\n        );\n        this.currentPiece.y = 0;\n        this.nextPiece = this.createRandomPiece();\n\n        if (this.checkCollision()) {\n          // 게임 오버 처리\n          this.endGame();\n        } else {\n          this.drawBoard();\n          this.drawNextPiece();\n        }\n      }\n\n      movePiece(direction) {\n        this.currentPiece.x += direction;\n        if (this.checkCollision()) {\n          this.currentPiece.x -= direction;\n        } else {\n          this.drawBoard();\n        }\n      }\n\n      movePieceDown() {\n        this.currentPiece.y += 1;\n        if (this.checkCollision()) {\n          this.currentPiece.y -= 1;\n          this.lockPiece();\n          this.clearLines();\n          this.spawnPiece();\n        } else {\n          this.drawBoard();\n        }\n      }\n\n      hardDrop() {\n        while (!this.checkCollision()) {\n          this.currentPiece.y += 1;\n        }\n        this.currentPiece.y -= 1;\n        this.lockPiece();\n        this.clearLines();\n        this.spawnPiece();\n      }\n\n      rotatePiece() {\n        const oldRotation = this.currentPiece.rotationIndex;\n        this.currentPiece.rotationIndex = (this.currentPiece.rotationIndex + 1) % 4;\n        this.currentPiece.shape = this.getRotatedShape(\n          this.currentPiece.tetrominoKey,\n          this.currentPiece.rotationIndex\n        );\n\n        if (this.checkCollision()) {\n          this.currentPiece.rotationIndex = oldRotation;\n          this.currentPiece.shape = this.getRotatedShape(\n            this.currentPiece.tetrominoKey,\n            this.currentPiece.rotationIndex\n          );\n        } else {\n          this.drawBoard();\n        }\n      }\n\n      getRotatedShape(tetrominoKey, rotationIndex) {\n        const shapes = this.tetrominoes[tetrominoKey];\n        if (shapes[rotationIndex]) {\n          return shapes[rotationIndex];\n        } else {\n          // 회전된 모양 생성\n          let shape = shapes[0];\n          for (let i = 0; i < rotationIndex; i++) {\n            shape = this.rotateMatrix(shape);\n          }\n          shapes[rotationIndex] = shape;\n          return shape;\n        }\n      }\n\n      rotateMatrix(matrix) {\n        return matrix[0].map((val, index) =>\n          matrix.map(row => row[index]).reverse()\n        );\n      }\n\n      checkCollision() {\n        const { shape, x: posX, y: posY } = this.currentPiece;\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              const boardX = posX + x;\n              const boardY = posY + y;\n              if (\n                boardX < 0 ||\n                boardX >= this.boardWidth ||\n                boardY >= this.boardHeight ||\n                (boardY >= 0 && this.board[boardY][boardX])\n              ) {\n                return true;\n              }\n            }\n          }\n        }\n        return false;\n      }\n\n      lockPiece() {\n        const { shape, x: posX, y: posY } = this.currentPiece;\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              const boardX = posX + x;\n              const boardY = posY + y;\n              if (this.board[boardY]) {\n                this.board[boardY][boardX] = shape[y][x];\n              }\n            }\n          }\n        }\n      }\n\n      clearLines() {\n        let lines = 0;\n        for (let y = this.boardHeight - 1; y >= 0; y--) {\n          if (this.board[y].every(cell => cell !== 0)) {\n            this.board.splice(y, 1);\n            this.board.unshift(Array(this.boardWidth).fill(0));\n            lines++;\n            y++;\n          }\n        }\n\n        if (lines > 0) {\n          this.linesCleared += lines;\n          this.updateScore(lines);\n          this.updateLevel();\n        }\n      }\n\n      updateScore(lines) {\n        const lineScores = [0, 100, 300, 500, 800];\n        this.score += lineScores[lines];\n        this.scoreText.setText(`점수: ${this.score}`);\n      }\n\n      updateLevel() {\n        const newLevel = Math.floor(this.linesCleared / 10) + 1;\n        if (newLevel > this.level && newLevel <= 10) {\n          this.level = newLevel;\n          this.levelText.setText(`레벨: ${this.level}`);\n          this.dropInterval = 1000 - (this.level - 1) * 100;\n        }\n      }\n\n      drawBoard() {\n        if (this.graphics) {\n          this.graphics.clear();\n        } else {\n          this.graphics = this.add.graphics();\n        }\n\n        // 배경색 채우기 (게임 보드 영역만)\n        this.graphics.fillStyle(0x000000);\n        this.graphics.fillRect(\n          0,\n          0,\n          this.boardWidth * this.gridSize,\n          this.boardHeight * this.gridSize\n        );\n\n        // 보드 그리기\n        for (let y = 0; y < this.boardHeight; y++) {\n          for (let x = 0; x < this.boardWidth; x++) {\n            if (this.board[y][x]) {\n              this.graphics.fillStyle(0xffffff);\n              this.graphics.fillRect(\n                x * this.gridSize,\n                y * this.gridSize,\n                this.gridSize - 1,\n                this.gridSize - 1\n              );\n            }\n          }\n        }\n\n        // 현재 블록 그리기\n        const { shape, x: posX, y: posY } = this.currentPiece;\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              this.graphics.fillStyle(0xff0000);\n              this.graphics.fillRect(\n                (posX + x) * this.gridSize,\n                (posY + y) * this.gridSize,\n                this.gridSize - 1,\n                this.gridSize - 1\n              );\n            }\n          }\n        }\n      }\n\n      drawNextPiece() {\n        if (this.nextPieceGraphics) {\n          this.nextPieceGraphics.clear();\n        } else {\n          this.nextPieceGraphics = this.add.graphics();\n        }\n        this.nextPieceGraphics.clear();\n\n        const offsetX = this.boardWidth * this.gridSize + 10; // 게임 보드 오른쪽 밖으로 이동\n        const offsetY = 150; // 이전보다 아래로 조정\n\n        const { shape } = this.nextPiece;\n        for (let y = 0; y < shape.length; y++) {\n          for (let x = 0; x < shape[y].length; x++) {\n            if (shape[y][x]) {\n              this.nextPieceGraphics.fillStyle(0x00ff00);\n              this.nextPieceGraphics.fillRect(\n                offsetX + x * (this.gridSize / 2),\n                offsetY + y * (this.gridSize / 2),\n                (this.gridSize / 2) - 1,\n                (this.gridSize / 2) - 1\n              );\n            }\n          }\n        }\n\n        // \"다음 블록\" 텍스트 표시\n        if (!this.nextText) {\n          this.nextText = this.add.text(\n            offsetX,\n            offsetY - 30,\n            '다음 블록:',\n            { fontSize: '20px', fill: '#fff' }\n          );\n        } else {\n          this.nextText.setPosition(offsetX, offsetY - 30);\n        }\n      }\n\n      createText() {\n        const textOffsetX = this.boardWidth * this.gridSize + 10; // 게임 보드 오른쪽 밖으로 이동\n        this.scoreText = this.add.text(textOffsetX, 10, '점수: 0', {\n          fontSize: '20px',\n          fill: '#fff',\n        });\n        this.levelText = this.add.text(textOffsetX, 40, '레벨: 1', {\n          fontSize: '20px',\n          fill: '#fff',\n        });\n      }\n\n      drawSeparatorLine() {\n        if (!this.separatorGraphics) {\n          this.separatorGraphics = this.add.graphics();\n        }\n        this.separatorGraphics.lineStyle(2, 0xffffff, 1);\n        this.separatorGraphics.beginPath();\n        this.separatorGraphics.moveTo(this.boardWidth * this.gridSize, 0);\n        this.separatorGraphics.lineTo(\n          this.boardWidth * this.gridSize,\n          this.boardHeight * this.gridSize\n        );\n        this.separatorGraphics.closePath();\n        this.separatorGraphics.strokePath();\n      }\n    }\n\n    const config = {\n      type: Phaser.AUTO,\n      width: 14 * 32, // 너비를 늘려 오른쪽에 공간 추가\n      height: 20 * 32,\n      parent: gameRef.current,\n      scene: TetrisScene,\n    };\n\n    const game = new Phaser.Game(config);\n    gameInstance.current = game;\n\n    return () => {\n      if (gameInstance.current) {\n        gameInstance.current.destroy(true);\n        gameInstance.current = null;\n      }\n    };\n  }, []);\n\n  return <div ref={gameRef}></div>;\n};\n\nexport default TetrisGame;","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport Seo from \"../../components/seo\";\nimport TetrisGame from \"../../components/tetris-game/TetrisGame\";\nimport Layout from \"../../components/layout/layout\"\n\nconst TetrisGameApp = () => {\n    return (\n        <Layout>\n            <div>\n                <h1>테트리스 게임</h1>\n                <TetrisGame />\n            </div>\n\n            <br />\n            <Link to=\"/\">Go back to the homepage</Link>\n        </Layout>\n    );\n}\n\nexport const Head = () => <Seo title=\"This is a minesweeper game that you can easily play when you're bored.\" />\n\nexport default TetrisGameApp;"],"names":["GamepadIcon","xmlns","fill","viewBox","strokeWidth","stroke","className","strokeLinecap","strokeLinejoin","d","CodeBracketIcon","ArrowLeftIcon","GithubIcon","MotionGraphicsIcon","x","y","width","height","rx","Link","to","href","target","rel","Date","getFullYear","children","isFullscreen","description","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","author","gameRef","useRef","gameInstance","useEffect","TetrisScene","key","gameState","score","level","linesCleared","dropInterval","lastDropTime","board","currentPiece","nextPiece","gridSize","boardWidth","boardHeight","preload","create","this","input","keyboard","on","handleInput","handlePointerDown","createText","showStartText","drawSeparatorLine","update","time","movePieceDown","startText","add","text","sys","game","config","fontSize","setOrigin","startGame","restartGame","event","code","movePiece","rotatePiece","hardDrop","destroy","Array","from","length","updateScore","updateLevel","tetrominoes","I","O","T","S","Z","J","L","createRandomPiece","spawnPiece","drawBoard","drawNextPiece","endGame","gameOverText","keys","Object","randomKey","Math","floor","random","shape","rotationIndex","tetrominoKey","checkCollision","direction","lockPiece","clearLines","oldRotation","getRotatedShape","shapes","i","rotateMatrix","matrix","map","val","index","row","reverse","posX","posY","boardX","boardY","lines","every","cell","splice","unshift","scoreText","setText","newLevel","levelText","graphics","clear","fillStyle","fillRect","nextPieceGraphics","offsetX","nextText","setPosition","offsetY","textOffsetX","separatorGraphics","lineStyle","beginPath","moveTo","lineTo","closePath","strokePath","Phaser","type","parent","current","scene","ref","Head"],"sourceRoot":""}