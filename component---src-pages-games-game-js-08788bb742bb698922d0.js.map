{"version":3,"file":"component---src-pages-games-game-js-08788bb742bb698922d0.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/pages/games/game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Minesweeper = () => {\n    const [board, setBoard] = useState([]);\n    const [gameOver, setGameOver] = useState(false);\n    const [win, setWin] = useState(false);\n    const [difficulty, setDifficulty] = useState('medium');\n\n    const difficulties = {\n        easy: { rows: 8, cols: 8, mines: 10 },\n        medium: { rows: 16, cols: 16, mines: 40 },\n        hard: { rows: 16, cols: 30, mines: 99 }\n    };\n\n    useEffect(() => {\n        initializeBoard();\n    }, [difficulty]);\n\n    const initializeBoard = () => {\n        const { rows, cols, mines } = difficulties[difficulty];\n        let newBoard = Array(rows).fill().map(() => Array(cols).fill({ isMine: false, isRevealed: false, neighborMines: 0 }));\n\n        // Place mines\n        let minesPlaced = 0;\n        while (minesPlaced < mines) {\n        const row = Math.floor(Math.random() * rows);\n        const col = Math.floor(Math.random() * cols);\n        if (!newBoard[row][col].isMine) {\n            newBoard[row][col].isMine = true;\n            minesPlaced++;\n        }\n        }\n\n        // Calculate neighbor mines\n        for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (!newBoard[i][j].isMine) {\n            let count = 0;\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                const ni = i + di;\n                const nj = j + dj;\n                if (ni >= 0 && ni < rows && nj >= 0 && nj < cols && newBoard[ni][nj].isMine) {\n                    count++;\n                }\n                }\n            }\n            newBoard[i][j].neighborMines = count;\n            }\n        }\n        }\n\n        setBoard(newBoard);\n        setGameOver(false);\n        setWin(false);\n    };\n\n    const revealCell = (row, col) => {\n        if (gameOver || win || board[row][col].isRevealed) return;\n\n        let newBoard = [...board];\n        newBoard[row][col].isRevealed = true;\n\n        if (newBoard[row][col].isMine) {\n        setGameOver(true);\n        } else if (newBoard[row][col].neighborMines === 0) {\n        revealNeighbors(newBoard, row, col);\n        }\n\n        setBoard(newBoard);\n        checkWin(newBoard);\n    };\n\n    const revealNeighbors = (board, row, col) => {\n        const { rows, cols } = difficulties[difficulty];\n        for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n            const newRow = row + i;\n            const newCol = col + j;\n            if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && !board[newRow][newCol].isRevealed) {\n            board[newRow][newCol].isRevealed = true;\n            if (board[newRow][newCol].neighborMines === 0) {\n                revealNeighbors(board, newRow, newCol);\n            }\n            }\n        }\n        }\n    };\n\n    const checkWin = (board) => {\n        const { rows, cols, mines } = difficulties[difficulty];\n        let revealedCount = 0;\n        for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (board[i][j].isRevealed) revealedCount++;\n        }\n        }\n        if (revealedCount === rows * cols - mines) {\n        setWin(true);\n        }\n    };\n\n    const renderBoard = () => {\n        return board.map((row, i) => (\n        <div key={i} style={{ display: 'flex' }}>\n            {row.map((cell, j) => (\n            <div\n                key={`${i}-${j}`}\n                onClick={() => revealCell(i, j)}\n                style={{\n                width: 30,\n                height: 30,\n                border: '1px solid black',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                backgroundColor: cell.isRevealed ? '#ccc' : '#fff',\n                cursor: 'pointer'\n                }}\n            >\n                {cell.isRevealed && (cell.isMine ? 'üí£' : cell.neighborMines > 0 ? cell.neighborMines : '')}\n            </div>\n            ))}\n        </div>\n        ));\n    };\n\n    return (\n        <div>\n        <h1>ÏßÄÎ¢∞Ï∞æÍ∏∞</h1>\n        <div>\n            <label>ÎÇúÏù¥ÎèÑ: </label>\n            <select value={difficulty} onChange={(e) => setDifficulty(e.target.value)}>\n            <option value=\"easy\">Ïâ¨ÏõÄ</option>\n            <option value=\"medium\">Î≥¥ÌÜµ</option>\n            <option value=\"hard\">Ïñ¥Î†§ÏõÄ</option>\n            </select>\n        </div>\n        <button onClick={initializeBoard}>ÏÉà Í≤åÏûÑ</button>\n        {renderBoard()}\n        {gameOver && <div>Í≤åÏûÑ Ïò§Î≤Ñ!</div>}\n        {win && <div>ÏäπÎ¶¨!</div>}\n        </div>\n    );\n};\n\n//TODO Ïó¨Í∏∞Î•º ÌÖúÌîåÎ¶øÏúºÎ°ú Î≥ÄÍ≤Ω ÌïòÍ∏∞\nconst MinesweeperApp = () => (\n    <Layout>\n        <div>\n            <h1>JSON Formatter</h1>\n            <Minesweeper />\n        </div>\n            \n        <br />\n        <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n)\n\nexport const Head = () => <Seo title=\"A service that provides features that make it easier to view JSON formats.\" />\n\nexport default MinesweeperApp"],"names":["Minesweeper","board","setBoard","useState","gameOver","setGameOver","win","setWin","difficulty","setDifficulty","difficulties","easy","rows","cols","mines","medium","hard","useEffect","initializeBoard","newBoard","Array","fill","map","isMine","isRevealed","neighborMines","minesPlaced","row","Math","floor","random","col","i","j","count","di","dj","ni","nj","revealNeighbors","newRow","newCol","checkWin","revealedCount","value","onChange","e","target","onClick","key","style","display","cell","revealCell","width","height","border","justifyContent","alignItems","backgroundColor","cursor","Head","Seo","title","Layout","Link","to"],"sourceRoot":""}